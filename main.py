from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, ConversationHandler, filters
)

BOT_TOKEN = "7218519134:AAHRHXhHGBDdkrM_Sl7-gfW-xiZkUmT_D24"
ADMIN_ID = 1725226806  


ASK_NAME, ASK_PHONE, ASK_COURSE = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∫—É—Ä—Å", callback_data="signup")],
        [InlineKeyboardButton("–ü—Ä–æ –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="contacts")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "signup":
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º‚Äô—è:")
        return ASK_NAME

    elif query.data == "about":
        await query.edit_message_text("–ú–∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ –æ—Å–≤—ñ—Ç–Ω—ñ –∫—É—Ä—Å–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–ø—Ä—è–º—ñ–≤!")
        return ConversationHandler.END

    elif query.data == "contacts":
        await query.edit_message_text("–ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏: @your_contact_username")
        return ConversationHandler.END


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–î—è–∫—É—é! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return ASK_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Å –ø–æ —à–∞—Ö–∞—Ö", callback_data="chess")],
        [InlineKeyboardButton("–ö—É—Ä—Å –ø–æ –¥–∞–π–≤—ñ–Ω–≥—É", callback_data="diving")],
        [InlineKeyboardButton("–ö—É—Ä—Å –ø–æ —ó–∑–¥—ñ –Ω–∞ –∫–æ–Ω—è—Ö", callback_data="horses")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –∫—É—Ä—Å:", reply_markup=markup)
    return ASK_COURSE

async def get_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    course_map = {
        "chess": "–ö—É—Ä—Å –ø–æ —à–∞—Ö–∞—Ö",
        "diving": "–ö—É—Ä—Å –ø–æ –¥–∞–π–≤—ñ–Ω–≥—É",
        "horses": "–ö—É—Ä—Å –ø–æ —ó–∑–¥—ñ –Ω–∞ –∫–æ–Ω—è—Ö"
    }
    course = course_map.get(query.data, "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—É—Ä—Å")
    context.user_data["course"] = course

    name = context.user_data.get("name")
    phone = context.user_data.get("phone")

    msg = (f"üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n"
           f"üë§ –Ü–º‚Äô—è: {name}\n"
           f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
           f"üìö –ö—É—Ä—Å: {course}")
    await context.bot.send_message(ADMIN_ID, msg)

    await query.edit_message_text("–î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω—É ‚úÖ")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(main_menu_handler)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ASK_COURSE: [CallbackQueryHandler(get_course)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    print("Bot started!")
    app.run_polling()

if __name__ == "__main__":
    main()
